{"name":"DeLorean.js","tagline":"Flux Pattern Implementation for React.js","body":"DeLorean is a tiny Flux pattern implementation.\r\n\r\n## Install\r\n\r\nYou can install **DeLorean** with Bower:\r\n\r\n```bash\r\nbower install delorean\r\n```\r\n\r\nYou can also install by NPM to use with **Browserify** *(recommended)*\r\n\r\n```bash\r\nnpm install delorean.js\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar Flux = require('delorean.js').Flux;\r\n```\r\n\r\n## Stores\r\n\r\n> Stores contain the application state and logic. Their role is somewhat similar\r\n> to a model in a traditional MVC, but they manage the state of many objects â€”\r\n> they are not instances of one object. Nor are they the same as Backbone's\r\n> collections. More than simply managing a collection of ORM-style objects,\r\n> stores manage the application state for a particular domain within the application.\r\n\r\n### `Flux.createStore`\r\n\r\n```js\r\nvar TodoStore = Flux.createStore({\r\n\r\n  todos: [\r\n    {text: 'hello'},\r\n    {text: 'world'}\r\n  ],\r\n\r\n  actions: {\r\n    'todo:add': 'addTodo',\r\n    'todo:remove': 'removeTodo'\r\n  },\r\n\r\n  addTodo: function (todo) {\r\n    this.todos.push({text: todo.text});\r\n    this.emit('change');\r\n  },\r\n\r\n  removeTodo: function (todoToComplete) {\r\n    this.todos = this.todos.filter(function (todo) {\r\n      return todoToComplete.text !== todo.text\r\n    });\r\n    this.emit('change');\r\n  },\r\n\r\n  getState: function () {\r\n    return {\r\n      todos: this.todos\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Dispatcher\r\n\r\n> The dispatcher is the central hub that manages all data flow in a Flux application.\r\n> It is essentially a registry of callbacks into the stores. Each store registers\r\n> itself and provides a callback. When the dispatcher responds to an action,\r\n> all stores in the application are sent the data payload provided by the\r\n> action via the callbacks in the registry.\r\n\r\n### `Flux.createDispatcher`\r\n\r\n```js\r\nvar TodoListApp = Flux.createDispatcher({\r\n\r\n  removeTodo: function (todo) {\r\n    if (confirm('Do you really want to delete this todo?')) {\r\n      this.dispatch('todo:remove', todo);\r\n    }\r\n  },\r\n\r\n  getStores: function () {\r\n    return {\r\n      todoStore: TodoStore\r\n    }\r\n  }\r\n\r\n});\r\n```\r\n\r\n#### Action `dispatch`\r\n\r\nWhen an action is dispatched, all the stores know about the status and they\r\nprocess the data asynchronously. When all of them are finished the dispatcher\r\nemits `change:all` event, also `dispatch` method returns a promise.\r\n\r\n```js\r\nvar TodoListApp = Flux.createDispatcher({\r\n\r\n  removeTodo: function (todo) {\r\n    if (confirm('Do you really want to delete this todo?')) {\r\n      this.dispatch('todo:remove', todo)\r\n      .then(function () {\r\n        // All of the stores finished the process\r\n        // about 'todo:remove' action\r\n        alert('Item removed successfully');\r\n      });\r\n    }\r\n  },\r\n\r\n  getStores: function () {\r\n    return {\r\n      todoStore: TodoStore\r\n    }\r\n  }\r\n\r\n});\r\n```\r\n\r\n## Combining to React\r\n\r\nYou may bring all the flow together with the Views, actually *the Action generators*.\r\nYou should use **`Flux.mixins.storeListener`** mixin to get a view into the Flux system.\r\nAlso you should pass `dispatcher={DispatcherName}` attribute to React view.\r\n\r\n```js\r\n// Child views don't have to have storeListener.\r\n\r\nvar TodoItemView = React.createClass({\r\n\r\n  render: function (todo) {\r\n    return <li onClick={this.handleClick}>{this.props.todo.text}</li>\r\n  },\r\n\r\n  handleClick: function () {\r\n    this.props.dispatcher.removeTodo(this.props.todo);\r\n  }\r\n\r\n});\r\n\r\nvar TodoListView = React.createClass({\r\n\r\n  mixins: [Flux.mixins.storeListener],\r\n\r\n  render: function () {\r\n    var self = this;\r\n    return <ul>\r\n      {this.stores.todoStore.store.todos.map(function (todo) {\r\n        return <TodoItemView dispatcher={self.props.dispatcher} todo={todo}></TodoItemView>\r\n      })}\r\n    </ul>\r\n  }\r\n\r\n});\r\n```\r\n\r\n### `storeDidChanged` and `storesDidChanged`\r\n\r\nTwo functions are triggered when a store changed and all stores are changed. You can use\r\nthese functions if your application needs.\r\n\r\n```js\r\nvar TodoListView = React.createClass({\r\n\r\n  mixins: [Flux.mixins.storeListener],\r\n\r\n  // when all stores are updated\r\n  storesDidChanged: function () {\r\n    console.log(\"All stores are now updated.\");\r\n  },\r\n\r\n  // when a store updates\r\n  storeDidChanged: function (storeName) {\r\n    console.log(storeName + \" store is now updated.\");\r\n  },\r\n\r\n  render: function () {\r\n    // ...\r\n  }\r\n\r\n});\r\n```\r\n\r\n## Running an Example\r\n\r\n```bash\r\ngrunt example\r\nopen example/index.html\r\n```\r\n\r\n## Todo\r\n\r\n  - Improve Readme.\r\n\r\n## Name\r\n\r\nThe **flux capacitor** was the core component of Doctor Emmett Brown's time traveling **DeLorean time machine**\r\n\r\n## License\r\n\r\n[MIT License](http://f.mit-license.org)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}