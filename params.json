{"name":"DeLorean.js","tagline":"Flux Framework","body":"![DeLorean Logo](https://raw.githubusercontent.com/f/delorean/master/docs/asset/delorean-logo.png)\r\n\r\n# DeLorean.js\r\n\r\n[![Build Status](https://travis-ci.org/f/delorean.svg?branch=master)](https://travis-ci.org/f/delorean)\r\n [![NPM version](https://badge.fury.io/js/delorean.js.svg)](http://badge.fury.io/js/delorean.js)\r\n ![Coverage](http://progressed.io/bar/67?title=coverage)\r\n\r\nDeLorean is a tiny Flux pattern implementation.\r\n\r\n  - **Unidirectional data flow**, it makes your app logic **simpler than MVC**,\r\n  - Automatically listens data changes and keeps your data updated,\r\n  - Makes data more **consistent** in your whole application,\r\n  - It's framework agnostic, completely. There's **no view framework dependency**.\r\n  - Too small, just **4K** gzipped.\r\n  - Built-in **React.js** integration, easy to use with **Flight.js** and **Ractive.js** and probably all others.\r\n\r\n### Tutorial\r\n\r\nYou can learn Flux and DeLorean.js in minutes. [Read the tutorial](https://github.com/f/delorean/blob/master/docs/tutorial.md)\r\n\r\n## Using with Frameworks\r\n\r\n  - [Try **React.js** example on JSFiddle](http://jsfiddle.net/fkadev/a2ms7rcc/)\r\n  - [Try **Flight.js** example on JSFiddle](http://jsfiddle.net/fkadev/1cw9Leau/)\r\n  - [Try **Ractive.js** example on JSFiddle](http://jsfiddle.net/PhilJ/2r1k2k90/2/)\r\n\r\n---\r\n\r\n## Install\r\n\r\nYou can install **DeLorean** with Bower:\r\n\r\n```bash\r\nbower install delorean\r\n```\r\n\r\nYou can also install by NPM to use with **Browserify** *(recommended)*\r\n\r\n```bash\r\nnpm install delorean.js\r\n```\r\n\r\n## Usage\r\n\r\nHipster way:\r\n\r\n```js\r\nvar Flux = require('delorean.js').Flux;\r\n// ...\r\n```\r\n\r\nOld-skool way:\r\n\r\n```html\r\n<script src=\"//rawgit.com/f/delorean/master/dist/delorean.min.js\"></script>\r\n<script>\r\nvar Flux = DeLorean.Flux;\r\n// ...\r\n</script>\r\n```\r\n\r\n## Overview\r\n\r\n```javascript\r\n/*\r\n * Stores are simple data buckets which manages data.\r\n */\r\nvar Store = Flux.createStore({\r\n  data: null,\r\n  setData: function (data) {\r\n    this.data = data;\r\n    this.emit('change');\r\n  },\r\n  actions: {\r\n    'incoming-data': 'setData'\r\n  }\r\n});\r\nvar store = new Store();\r\n\r\n/*\r\n * Dispatcher are simple action dispatchers for stores.\r\n * Stores handle the related action.\r\n */\r\nvar Dispatcher = Flux.createDispatcher({\r\n  setData: function (data) {\r\n    this.dispatch('incoming-data', data);\r\n  },\r\n  getStores: function () {\r\n    return {increment: store};\r\n  }\r\n});\r\n\r\n/*\r\n * Action Creators are simple controllers. They are simple functions.\r\n *  They talk to dispatchers. They are not required.\r\n */\r\nvar Actions = {\r\n  setData: function (data) {\r\n    Dispatcher.setData(data);\r\n  }\r\n};\r\n\r\n// The data cycle.\r\nstore.onChange(function () {\r\n  // End of data cycle.\r\n  document.getElementById('result').innerText = store.store.data;\r\n});\r\n\r\ndocument.getElementById('dataChanger').onclick = function () {\r\n  // Start data cycle:\r\n  Actions.setData(Math.random());\r\n};\r\n```\r\n[Run this example on JSFiddle](http://jsfiddle.net/fkadev/40cx3146/)\r\n\r\n## Docs\r\n\r\nYou can read the [tutorial](./docs/tutorial.md) to learn how to start using\r\n**DeLorean.js** with your favorite framework.\r\n\r\n### Basic Concepts\r\n\r\n  - [**Store**: A postbox](https://github.com/f/delorean/blob/master/docs/store.md)\r\n  - [**Dispatcher**: The postman, drops mails to the postboxes](https://github.com/f/delorean/blob/master/docs/dispatcher.md)\r\n  - [**View**: Box owner, checks box for the mail](https://github.com/f/delorean/blob/master/docs/views.md)\r\n  - [**Action Creator**: The post office, manages postmans](https://github.com/f/delorean/blob/master/docs/actions.md)\r\n\r\nOr you can visit [documents](https://github.com/f/delorean/blob/master/docs/) page.\r\n\r\n## License\r\n\r\n[MIT License](http://f.mit-license.org)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}